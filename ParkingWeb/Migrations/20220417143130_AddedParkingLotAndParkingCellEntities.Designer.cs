// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingWeb.Data;

#nullable disable

namespace ParkingWeb.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220417143130_AddedParkingLotAndParkingCellEntities")]
    partial class AddedParkingLotAndParkingCellEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ParkingWeb.Data.Entities.Campus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Addres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.ParkingCell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ParkingLotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotId");

                    b.HasIndex("Name", "ParkingLotId")
                        .IsUnique();

                    b.ToTable("ParkingCells");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.ParkingLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.HasIndex("Name", "CampusId")
                        .IsUnique();

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.ParkingCell", b =>
                {
                    b.HasOne("ParkingWeb.Data.Entities.ParkingLot", "ParkingLot")
                        .WithMany("ParkingCells")
                        .HasForeignKey("ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.ParkingLot", b =>
                {
                    b.HasOne("ParkingWeb.Data.Entities.Campus", "Campus")
                        .WithMany("ParkingLots")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.Campus", b =>
                {
                    b.Navigation("ParkingLots");
                });

            modelBuilder.Entity("ParkingWeb.Data.Entities.ParkingLot", b =>
                {
                    b.Navigation("ParkingCells");
                });
#pragma warning restore 612, 618
        }
    }
}
